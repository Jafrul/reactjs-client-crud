[{"/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/index.js":"1","/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/App.js":"2","/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/reportWebVitals.js":"3","/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/Category/CategoryList.js":"4","/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/Category/AddCategory.js":"5","/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/Category/EditCategory.js":"6","/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/Category/Table.js":"7"},{"size":547,"mtime":1608828624568,"results":"8","hashOfConfig":"9"},{"size":1204,"mtime":1608835469866,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1608828624568,"results":"11","hashOfConfig":"9"},{"size":1338,"mtime":1608828624568,"results":"12","hashOfConfig":"9"},{"size":3230,"mtime":1608828624568,"results":"13","hashOfConfig":"9"},{"size":4138,"mtime":1608828624568,"results":"14","hashOfConfig":"9"},{"size":1128,"mtime":1608828624568,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ddf1n7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/index.js",[],["34","35"],"/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/App.js",[],"/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/reportWebVitals.js",[],"/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/Category/CategoryList.js",[],"/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/Category/AddCategory.js",["36"],"import React from 'react';\nimport axios from 'axios';\nimport '../Category/AddCategory.css';\nimport { Container, Col, Form, Row, FormGroup, Label, Input, Button } from 'reactstrap';\nclass AddCategory extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            employeeName: '',\n            employeeGender: '',\n            employeePhone:'',\n        }\n    }\n    AddCategory = () => {\n        let employeeDTO = {employeeName: this.state.employeeName, employeeGender: this.state.employeeGender, employeePhone:this.state.employeePhone };\n        axios.post('http://localhost:8082/employee/add', employeeDTO)\n            .then(json => {\n                if (json) {\n                    alert(\"Data Saved Successfully\");\n                    this.props.history.push('/CategoryList')\n                }\n                else {\n                    alert('Data not Saved');\n                    this.props.history.push('/CategoryList')\n                }\n            })\n    }\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n    render() {\n        return (\n            <Container className=\"App\">\n                <h4 className=\"PageHeading\">Enter Employee Informations</h4>\n                <Form className=\"form\">\n                    <Col>\n                        <FormGroup row>\n                            <Label for=\"name\" sm={2}>Name</Label>\n                            <Col sm={10}>\n                                <Input type=\"text\" name=\"employeeName\" onChange={this.handleChange} value={this.state.employeeName} placeholder=\"Enter Name\" />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Label for=\"address\" sm={2}>Gender</Label>\n                            <Col sm={10}>\n                                <Input type=\"text\" name=\"employeeGender\" onChange={this.handleChange} value={this.state.employeeGender} placeholder=\"Enter gender\" />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Label for=\"address\" sm={2}>Phone</Label>\n                            <Col sm={10}>\n                                <Input type=\"text\" name=\"employeePhone\" onChange={this.handleChange} value={this.state.employeePhone} placeholder=\"Enter phone\" />\n                            </Col>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup row>\n                            <Col sm={5}>\n                            </Col>\n                            <Col sm={1}>\n                                <button type=\"button\" onClick={this.AddCategory} className=\"btn btn-success\">Submit</button>\n                            </Col>\n                            <Col sm={1}>\n                                <Button color=\"danger\">Cancel</Button>{' '}\n                            </Col>\n                            <Col sm={5}>\n                            </Col>\n                        </FormGroup>\n                    </Col>\n                </Form>\n            </Container>\n        );\n    }\n}\nexport default AddCategory;","/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/Category/EditCategory.js",["37"],"import React from 'react';\nimport { Container, Col, Form, Row, FormGroup, Label, Input, Button } from 'reactstrap';\nimport axios from 'axios'\nimport '../Category/AddCategory.css'\nclass Edit extends React.Component {\n    constructor(props) {\n        super(props)\n        this.onChangeEmployeeName = this.onChangeEmployeeName.bind(this);\n        this.onChangeEmployeeGender = this.onChangeEmployeeGender.bind(this);\n        this.onChangeEmployeePhone = this.onChangeEmployeePhone.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.state = {\n            employeeName: '',\n            employeeGender: '',\n            employeePhone:'',\n        }\n    }\n    componentDidMount() {\n        axios.get('http://localhost:8082/employee/find/by-id?id=' + this.props.match.params.id)\n            .then(response => {\n                this.setState({\n                    employeeName: response.data.employeeName,\n                    employeePhone: response.data.employeePhone,\n                    employeeGender: response.data.employeeGender\n                });\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    onChangeEmployeeName(e) {\n        this.setState({\n            employeeName: e.target.value\n        });\n    }\n\n    onChangeEmployeeGender(e) {\n        this.setState({\n            employeeGender: e.target.value\n        });\n    }\n\n    onChangeEmployeePhone(e) {\n        this.setState({\n            employeePhone: e.target.value\n        });\n    }\n\n    onSubmit(e) {\n        debugger;\n        e.preventDefault();\n        const employeeDTO = {\n            employeeId: this.props.match.params.id,\n            employeeName: this.state.employeeName,\n            employeeGender: this.state.employeeGender,\n            employeePhone: this.state.employeePhone\n        };\n        axios.post('http://localhost:8082/employee/update', employeeDTO)\n            .then(res => { this.props.history.push('/CategoryList') });\n\n    }\n    render() {\n        return (\n            <Container className=\"App\">\n                <h4 className=\"PageHeading\">Update Category Informations</h4>\n                <Form className=\"form\" onSubmit={this.onSubmit}>\n                    <Col>\n                        <FormGroup row>\n                            <Label for=\"name\" sm={2}>Name</Label>\n                            <Col sm={10}>\n                                <Input type=\"text\" name=\"employeeName\" value={this.state.employeeName} onChange={this.onChangeEmployeeName} placeholder=\"Enter Name\" />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Label for=\"Password\" sm={2}>Gender</Label>\n                            <Col sm={10}>\n                                <Input type=\"text\" name=\"employeeGender\" value={this.state.employeeGender} onChange={this.onChangeEmployeeGender} placeholder=\"Enter Gender\" />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Label for=\"Password\" sm={2}>Phone</Label>\n                            <Col sm={10}>\n                                <Input type=\"text\" name=\"employeePhone\" value={this.state.employeePhone} onChange={this.onChangeEmployeePhone} placeholder=\"Enter Phone\" />\n                            </Col>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup row>\n                            <Col sm={5}>\n                            </Col>\n                            <Col sm={1}>\n                                <Button type=\"submit\" color=\"success\">Submit</Button>{' '}\n                            </Col>\n                            <Col sm={1}>\n                                <Button color=\"danger\">Cancel</Button>{' '}\n                            </Col>\n                            <Col sm={5}>\n                            </Col>\n                        </FormGroup>\n                    </Col>\n                </Form>\n            </Container>\n        );\n    }\n}\nexport default Edit;","/home/sumon/Desktop/microblogging-assessment/micro-blogging-frontend/src/Category/Table.js",["38"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nclass Table extends Component {\n    constructor(props) {\n        super(props);\n    }\n    DeleteCategory = () => {\n        axios.delete('http://localhost:8082/employee/delete/' + parseInt(this.props.obj.employeeId))\n            .then(json => {\n                alert('Record deleted successfully!!');\n            })\n    }\n    render() {\n        return (\n            <tr>\n                <td>\n                    {this.props.obj.employeeName}\n                </td>\n                <td>\n                    {this.props.obj.employeePhone}\n                </td>\n                <td>\n                    {this.props.obj.employeeGender}\n                </td>\n                <td>\n                    <Link to={\"/edit/\" + this.props.obj.employeeId} className=\"btn btn-success\">Edit</Link>\n                </td>\n                <td>\n                    <button type=\"button\" onClick={this.DeleteCategory} className=\"btn btn-danger\">Delete</button>\n                </td>\n            </tr>\n        );\n    }\n}\nexport default Table;",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":4,"column":32,"nodeType":"45","messageId":"46","endLine":4,"endColumn":35},{"ruleId":"43","severity":1,"message":"44","line":2,"column":32,"nodeType":"45","messageId":"46","endLine":2,"endColumn":35},{"ruleId":"47","severity":1,"message":"48","line":5,"column":5,"nodeType":"49","messageId":"50","endLine":7,"endColumn":6},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]